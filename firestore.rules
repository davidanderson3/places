rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Compute a hash signature of decisions without schedule fields
    function itemsSignature(items) {
      return hashing.sha256(
        items.map(item,
          item.diff({'scheduled': item.scheduled, 'scheduledEnd': item.scheduledEnd})
        ).toString()
      );
    }

    // Precomputed signature of the demo/sample decisions dataset
    function SAMPLE_DECISIONS_SIGNATURE() {
      return "e54cef8b23877d5d0786a840e398ee8567665b3251aab3eae158331a1be0fa78";
    }

    // 1) User settings under /users/{uid}/settings/{docId}
    match /users/{userId}/settings/{settingDocId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // 2) Daily stats under /users/{uid}/dailyStats/{statDocId}
    match /users/{userId}/dailyStats/{statDocId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // 3) Task completions at /taskCompletions/{uid}
    match /taskCompletions/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // 4) Projects ordering at /decisions/{uid}
    match /decisions/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null
                   && request.auth.uid == userId
                   && request.resource.data.items is list
                   && request.resource.data.items.size() > 0
                   && request.resource.data.items.all(item,
                        item.keys().hasAll(['id', 'text']) &&
                        item.id is string && item.id.size() > 0 &&
                        item.text is string && item.text.size() > 0 &&
                        !item.id.matches('^demo-.*')
                     )
                   && itemsSignature(request.resource.data.items) !=
                      SAMPLE_DECISIONS_SIGNATURE();
    }

    // 5) Lists storage at /lists/{uid}
    match /lists/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // 6) Daily notes at /dailyNotes/{uid}/notes/{noteId}
    match /dailyNotes/{userId}/notes/{noteId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // 7) Travel data at /users/{uid}/travel/{placeId}
    match /users/{userId}/travel/{placeId} {
      function isValidPlace(data) {
        return data.keys().hasOnly(['name','description','lat','lon','tags','Rating','Date','visited'])
          && data.name is string && data.name.size() > 0 && data.name.size() <= 140
          && data.lat is number && data.lon is number
          && (!('description' in data) || (data.description is string && data.description.size() <= 2000))
          && (!('tags' in data) || (data.tags is list && data.tags.size() <= 20 && data.tags.all(t => t is string && t.size() <= 40)))
          && (!('Rating' in data) || (data.Rating is string || data.Rating is number))
          && (!('Date' in data) || (data.Date is string || data.Date is timestamp))
          && (!('visited' in data) || (data.visited is bool));
      }
      allow read: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId && isValidPlace(request.resource.data);
      allow update: if request.auth != null && request.auth.uid == userId && isValidPlace(request.resource.data);
      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    // 8) Asset history at /users/{uid}/assetHistory/{dayId}
    match /users/{userId}/assetHistory/{dayId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // 9) Sample session data for anonymous users
    match /sample/{sessionId} {
      allow read, write: if true;
    }

    // Everything else locked down
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
