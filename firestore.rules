rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {


    // 1) User settings under /users/{uid}/settings/{docId}
    match /users/{userId}/settings/{settingDocId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // (removed) Other app collections are not part of Places

    // 7) Travel data at /users/{uid}/travel/{placeId}
    match /users/{userId}/travel/{placeId} {
      function isValidPlace(data) {
        return data.keys().hasOnly(['name','description','lat','lon','tags','Rating','Date','visited'])
          && data.name is string && data.name.size() > 0 && data.name.size() <= 140
          && data.lat is number && data.lon is number
          && (!('description' in data) || (data.description is string && data.description.size() <= 2000))
          && (!('tags' in data) || (data.tags is list && data.tags.size() <= 20 && data.tags.all(t => t is string && t.size() <= 40)))
          && (!('Rating' in data) || (data.Rating is string || data.Rating is number))
          && (!('Date' in data) || (data.Date is string || data.Date is timestamp))
          && (!('visited' in data) || (data.visited is bool));
      }
      allow read: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId && isValidPlace(request.resource.data);
      allow update: if request.auth != null && request.auth.uid == userId && isValidPlace(request.resource.data);
      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    // (removed) Asset history and sample collections

    // Everything else locked down
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
